@inject IMediator mediator
@inject ILogger<StartScreen> logger

@if (LoggedIn != true)
{
	<section
		class="card">
		<form @onsubmit="Login" class="grid">
			<label
				for="login">
				Login:
			</label>
			<input
				id="login"
				placeholder="fresh login"
				@bind-value="login"
				required
				/>
			<label
				for="password">
				Password:
			</label>
			<input
				id="password"
				placeholder="fresh password"
				@bind-value="password"
				required />
			<button
				disabled = "@submitBtnDisabled"
				type="submit">
				@(submitBtnDisabled? "Attemting to login..." : "Login")
			</button>
			@if (LoggedIn == false)
			{
				<p
					class="alert">
					Logging in failed.
				</p>
			}
		</form>
	</section>
}

@if (LoggedIn == true)
{
	<main
		class="main-ui grid">
		<HashtagInput />
		<TableContainer />
	</main>
}

@code {
	public bool? LoggedIn { get; set; } = null;
	private string login = string.Empty;
	private string password = string.Empty;
	private bool submitBtnDisabled = false;

	private async void Login()
	{
		logger.LogInformation("Login attempt {status}", "start");
		submitBtnDisabled = true;
		LoggedIn = await mediator.Send(new LoginRequest(login, password));
		logger.LogInformation("Login attempt {status}", LoggedIn == true ? "success" : "failed");
		submitBtnDisabled = false;
		StateHasChanged();
	}
}
